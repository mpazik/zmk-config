// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W        &kp E       &kp R             &kp T          &kp Y        &kp U            &kp I       &kp O                &kp P
&kp A             &ht LCTRL S  &ht LALT D  &ht LGUI F        &kp G          &kp H        &ht RGUI J       &ht RALT K  &ht RIGHT_CONTROL L  &lt 5 SEMICOLON
&ht LEFT_SHIFT Z  &kp X        &kp C       &kp V             &kp B          &kp N        &kp M            &kp COMMA   &kp DOT              &ht RIGHT_SHIFT SINGLE_QUOTE
                                           &kt LEFT_COMMAND  &lt 2 SPACE    &lt 1 ENTER  &kt RIGHT_SHIFT
            >;
        };

        right_layer {
            bindings = <
&kp N1      &kp N2    &kp N3     &kp N4   &kp N5    &kp N6    &kp N7     &kp N8     &kp N9     &kp N0
&kt ESCAPE  &kp CAPS  &kp PSCRN  &kp INS  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
&kt CAPS    &trans    &trans     &trans   &trans    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &bootloader
                                 &trans   &trans    &trans    &trans
            >;
        };

        left_layer {
            bindings = <
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT          &kp CARET  &kp AMPS   &kp ASTRK  &kp GRAVE  &kp TILDE
&kp DQT   &kp LBKT  &kp LBRC  &kp LPAR  &default_report    &kp FSLH   &kp MINUS  &kp EQUAL  &kp COLON  &kp SEMI
&kp SQT   &kp RBKT  &kp RBRC  &kp RPAR  &bootloader        &kp BSLH   &kp UNDER  &kp PLUS   &kp PIPE   &kp QMARK
                              &trans    &trans             &tog 4     &trans
            >;
        };

        tri_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &kt LANGUAGE_1  &kt K_LOCK    &kp C_MUTE    &kp C_PREV
&kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp LANG2       &kp C_BRI_UP  &kp C_VOL_UP  &kp C_PP
&kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &out OUT_TOG  &kp LANGUAGE_3  &kt C_BRI_DN  &kp C_VOL_DN  &kp C_NEXT
                          &trans   &trans          &trans        &trans
            >;
        };

        mouse {
            bindings = <
&tog 4  &mkp MB4  &mkp MCLK  &mkp MB5   &trans        &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &tog 4
&trans  &trans    &trans     &trans     &trans        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans     &trans     &trans        &trans          &mkp MB4        &mkp MCLK     &mkp MB5         &trans
                             &kp SPACE  &kp LSHIFT    &mkp LCLK       &mkp RCLK
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kt DELETE     &kt LEFT_BRACKET  &kt UP_ARROW    &kt RIGHT_BRACKET  &trans
&trans  &trans  &trans  &trans  &trans    &kt BACKSPACE  &kt LEFT          &kt DOWN_ARROW  &kt RIGHT          &trans
&trans  &trans  &trans  &trans  &trans    &trans         &trans            &trans          &trans             &trans
                        &trans  &trans    &trans         &trans
            >;
        };
    };
};
