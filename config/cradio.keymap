// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W        &kp E       &kp R             &kp T          &kp Y        &kp U       &kp I       &kp O                &kp P
&kp A             &ht LCTRL S  &ht LALT D  &ht LGUI F        &kp G          &kp H        &ht RGUI J  &ht RALT K  &ht RIGHT_CONTROL L  &lt 4 SEMICOLON
&ht LEFT_SHIFT Z  &kp X        &kp C       &kp V             &kp B          &kp N        &kp M       &kp COMMA   &kp DOT              &ht RIGHT_SHIFT SINGLE_QUOTE
                                           &kp LEFT_COMMAND  &lt 1 SPACE    &lt 2 ENTER  &kp RALT
            >;
        };

        left_layer {
            bindings = <
&kp TAB     &kp N7  &kp N8  &kp N9        &bootloader    &msc SCRL_UP    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &kp MINUS
&kp ESCAPE  &kp N4  &kp N5  &kp N6        &kp N0         &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp PLUS
&kp LSHIFT  &kp N1  &kp N2  &kp N3        &kp ENTER      &kp COMMA       &mkp MB4        &mkp MCLK       &mkp MB5         &kp KP_ASTERISK
                            &ht LCMD DOT  &trans         &mkp LCLK       &mkp RCLK
            >;
        };

        right_layer {
            bindings = <
&kp TAB         &kp EXCLAMATION  &kp AT_SIGN   &kp HASH   &kp DOLLAR    &bootloader   &kp AMPS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp NON_US_BACKSLASH
&kp ESCAPE      &kp LCTRL        &kp LEFT_ALT  &kp LCMD   &kp CAPS      &kp ASTERISK  &kp MINUS  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT
&kp LEFT_SHIFT  &kp PERCENT      &kp CARET     &kp GRAVE  &none         &kp EQUAL     &kp UNDER  &kp COMMA             &kp PERIOD             &kp SLASH
                                               &trans     &trans        &trans        &trans
            >;
        };

        tri_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &kp LANG1  &kp K_LOCK    &kp C_MUTE    &kp C_PREV
&kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp LANG2  &kp C_BRI_UP  &kp C_VOL_UP  &kp C_PP
&kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &out OUT_TOG  &kp LANG3  &kp C_BRI_DN  &kp C_VOL_DN  &kp C_NEXT
                          &trans   &trans          &trans        &trans
            >;
        };

        nav {
            bindings = <
&kp TAB     &kp N1     &kp N2    &kp N3    &kp N4    &kp DELETE     &kp LEFT_BRACKET  &kp UP_ARROW    &kp RIGHT_BRACKET  &trans
&kp ESCAPE  &kp LCTRL  &kp LALT  &kp LCMD  &kp N0    &kp BACKSPACE  &kp LEFT          &kp DOWN_ARROW  &kp RIGHT          &trans
&kp LSHIFT  &trans     &trans    &trans    &trans    &trans         &trans            &trans          &trans             &trans
                                 &trans    &trans    &trans         &trans
            >;
        };
    };
};
